version "2.3.0"
class HeadShotBaseZScript : Actor
{
	Default
	{
	-COUNTKILL +NOTARGET
	+NOGRAVITY +SHOOTABLE +NOTELEPORT /*+FORCERADIUSDMG*/ -SOLID +NODAMAGETHRUST
	+THRUGHOST +NORADIUSDMG +GHOST -COUNTKILL +NOTAUTOAIMED
	}
	override void Tick()
	{
		Super.Tick();
		if (master) SetOrigin(master.pos + (0,0,master.height),true);
	}
	
	override int DamageMobj(Actor inflictor, Actor source,int damage,Name mod,int Flags,Double angle)
	{
		if (master) master.DamageMobj(inflictor,source,damage * 1.5,mod != 'None' ? 'Head' : mod, flags,angle);
		return 0; //Do no real damage to self
	}
}
class PB_WeaponBase : DoomWeapon 
{
}
extend class PB_WeaponBase
{
	action state A_DoPBWeaponAction(Statelabel st)
	{
		if (CountInv("Grabbing_A_Ledge")>=1) 
		{
			return ResolveState("LedgeClimb");
		}
		else if (CountInv("DoPunch")>=1) 
		{
			return ResolveState("QuickPunch");
		}
		else if (CountInv("Kicking")>=1) {return ResolveState("DoKick");}
		else if (CountInv("Taunting")>=1) {return ResolveState("Taunt");}
		else if (CountInv("Salute1")>=1) {return ResolveState("Salute");}
		else if (CountInv("Salute2")>=1) {return ResolveState("Salute");}
		else if (CountInv("UseEquipment")>=1) {return ResolveState("UseEquipment");}
		else if (CountInv("ToggleEquipment")>=1) {return ResolveState("SwitchEquipment");}
		else if (CountInv("GoWeaponSpecialAbility")>=1) {return ResolveState("WeaponSpecial");}
		else if (CountInv("GrabbedBarrel")>=1) {return ResolveState("GrabBarrel");}
		return null;
	}
}