version "2.3.0"

class BossBrainBase : Actor
{
	void RemoveCubes()
	{
		ThinkerIterator ti = ThinkerIterator.Create("Actor");
		Actor a;
		while (a = Actor(ti.Next()))
		{
			if (a is "SpawnShot" || a is "BossEye") a.Destroy();
			if (a.bISMONSTER && a.bCOUNTKILL) a.A_Die("Massacre");
		}
	}
}

class HeadShotBaseZScript : Actor //ZScriptified Headbox
{
	Default
	{
		damagefactor "Taunt", 0.0;
		damagefactor "Blood", 0.0;
		damagefactor "BlueBlood", 0.0;
		damagefactor "Head", 0.0;
		damagefactor "MinorHead", 0.0;
		damagefactor "KillMe", 0.0;
		damagefactor "Control", 0.0;
		damagefactor "Trample", 0.0;
		damagefactor "GibRemoving", 0.0;
		//damagefactor "Melee", 0.3
		damagefactor "Alert", 0.0;
		damagefactor "SSG", 8.0;
		damagefactor "ExplosiveImpact", 0.0;
		damagefactor "Bullet", 1.5;
		damagefactor "GibRemoving", 0.0;
		damagefactor "TeleportRemover", 0.0;
		DamageFactor "Freeze", 0.0;
		DamageFactor "Shrink", 0.0;
		DamageFactor "Frost", 0.0;
		DamageFactor "Ice", 0.0;
		DamageFactor "Blackhole", 0.0;
		Speed 0;
		Radius 7;
		Height 18;
		BloodType "Brutal_Blood", "SawBlood", "SawBlood";
		-COUNTKILL +NOTARGET +MISSILE
		+NOGRAVITY +SHOOTABLE +NOTELEPORT -SOLID +NODAMAGETHRUST
		+THRUGHOST +NORADIUSDMG +GHOST -COUNTKILL +NOTAUTOAIMED +DONTTHRUST
	}
	States
	{
		Spawn:
			TNT1 A 1;
			Loop;
	}
	override void Tick()
	{
		Super.Tick();
		Console.Printf("1");
		if (master) SetXYZ(master.pos + (0,0,master.height - (master.height / 6)));
	}
	override void PostBeginPlay()
	{
		Super.PostBeginPlay();
		//A_GiveInventory("RadiusDebugMe");
		if (target) 
		{
			master = target;
			
			bMISSILE = false;
		}
	}
	override int DamageMobj(Actor inflictor, Actor source,int damage,Name mod,int Flags,Double angle)
	{
		Console.Printf("Got Hit");
		if (master) master.DamageMobj(inflictor,source,damage * 1.5,mod == 'None' ? 'Head' : mod, flags,angle);
		return 0; //Do no real damage to self
	}
}
class HeadshotBaseZScriptB :HeadshotBaseZScript //Green blood headbox
{
	Default
	{
		BloodType "Green_Blood", "GreenSawBlood", "GreenSawBlood";
		BloodColor "DarkGreen";
		Radius 12;
		Height 22;
		+NOBLOODDECALS
	}
}
class SpawnerBase : Actor
{
	void SpawnActor(class<Actor> spawnactor, bool HandleSpawnFlags = true)
	{
			Actor a = self;
			Actor r = a.Spawn(spawnactor,a.pos);
			r.spawnangle = a.spawnangle;
			r.angle = a.angle;
			r.pitch = a.pitch;
			r.roll = a.roll;
			r.spawnpoint = a.spawnpoint;
			r.special = a.special;
			r.args[0] = a.args[0];
			r.args[1] = a.args[1];
			r.args[2] = a.args[2];
			r.args[3] = a.args[3];
			r.args[4] = a.args[4];
			r.special1 = a.special1;
			r.special2 = a.special2;
			r.spawnflags = a.spawnflags&~MTF_SECRET;
			if (HandleSpawnFlags) r.HandleSpawnFlags();
			r.spawnflags = a.spawnflags;
			r.bCOUNTSECRET = a.spawnflags&MTF_SECRET;
			r.ChangeTid(a.tid);
			r.Vel = a.vel;
	}
}
	enum EPBWeaponFlags
	{
		PBWEAP_KEEPYOFFSET = 1<<0,
		PBWEAP_ISRIFLE = 1<<1,
		PBWEAP_CHECKRIFLEEMPTY = 1<<2,
		PBWEAP_ISPISTOLSILENCERSTATE = 1<<3
	}
class InvisiblePuff : BulletPuff
{
	Default
	{
		-ALLOWPARTICLES
	}
}
class LaserDeactivated : Inventory {}
class PB_WeaponBase : DoomWeapon 
{
	Actor laseractor;
	Actor InvActor;
	Vector3 invactorpos;
	int integer;
	action void A_DecideSpawnLaserPuff()
	{
			if (CountInv("LaserSightActivated")==1 && CountInv("KeepLaserDeactivated") != 1)
			{
				invoker.A_SpawnLaserPuff();
			}
			else 
			{
				invoker.A_DestroyLaserPuff();
			}
	}
	action void A_DestroyLaserPuff()
	{
		if (invoker.laseractor) invoker.laseractor.Destroy();
	}
	action Actor A_SpawnLaserPuff()
	{
		int integer;
		[invoker.InvActor, invoker.integer] = LineAttack(angle,4096,pitch,0,'None',"InvisiblePuff",LAF_NORANDOMPUFFZ|LAF_NOINTERACT);
		if (invoker.InvActor)
		{
			invoker.invactorpos = invoker.InvActor.pos;
			invoker.InvActor.Destroy();
		}
		if (!invoker.laseractor) invoker.laseractor = Spawn("LaserDotPerma",invoker.invactorpos);
		else invoker.laseractor.SetOrigin(invoker.invactorpos, true);
		
		return invoker.laseractor;
	}
	action state A_DoPBWeaponAction(int weapflags = WRF_ALLOWRELOAD, int pbFlags = 0)
	{
		static const string PBWeapEmptyToken[] = 
		{
			"PBPistolWasEmpty","RifleWasEmpty","UACSMGWasEmpty"
		};
		if (CountInv("GoFatality")>=1)
		{
			return ResolveState("Steady");
		}
		else if (CountInv("Grabbing_A_Ledge")>=1) 
		{
			return ResolveState("LedgeClimb");
		}
		else if (CountInv("DoPunch")>=1) 
		{
			return ResolveState("QuickPunch");
		}
		else if (CountInv("Kicking")>=1) 
		{
			return ResolveState("DoKick");
		}
		else if (CountInv("Taunting")>=1) 
		{
			return ResolveState("Taunt");
		}
		else if (CountInv("Salute1")>=1 || CountInv("Salute2")>=1) 
		{
			return ResolveState("Salute");
		}
		else if (CountInv("UseEquipment")>=1) 
		{
			return ResolveState("UseEquipment");
		}
		else if (CountInv("ToggleEquipment")>=1) 
		{
			return ResolveState("SwitchEquipment");
		}
		else if (CountInv("GoWeaponSpecialAbility")>=1)
		{
			if (ResolveState("DualWieldBaby")) return ResolveState("DualWieldBaby");
			else return ResolveState("WeaponSpecial");
		}
		else if (CountInv("GrabbedBarrel")>=1 || CountInv("GrabbedBurningBarrel")>=1) 
		{
			return ResolveState("GrabBarrel");
		}
		else if (CountInv("Unloading")>=1 && ResolveState("Unload"))
		{
			return ResolveState("Unload");
		}
		else if (ResolveState("LoadChamber"))
		{
			for (int i = 0; i < PBWeapEmptyToken.Size(); ++i)
			{
				if (CountInv(PBWeapEmptyToken[i]) >= 1)
				{
					return ResolveState("LoadChamber");
				}
			}
		}
		else if (ResolveState("ReadyToFireSilencer") 
		&& CountInv("SilencerEquipped") >= 1
		&& !(pbFlags & PBWEAP_ISPISTOLSILENCERSTATE))
		{
			return ResolveState("ReadyToFireSilencer");
		}
		A_WeaponReady(weapflags);
		A_WeaponOffset(-CallACS("Script_GetGunOffsetX"), CallACS("Script_GetGunOffsetY"),WOF_INTERPOLATE | (!!(pbFlags & PBWEAP_KEEPYOFFSET) ? WOF_KEEPY : 0));
		return null;
	}
}
