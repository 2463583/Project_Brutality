version "2.4.0"
const C_TID	= 1000;	//Default camera tid
const  MAX_R	= 56+32;	//Maximum radius (or distance from the player)
const  ADJUST_R = 8;	//Amount to adjust the camera by
const  VIEW_HEIGHT = 61.0;	//The approximate hight of the player's view
class PB_EventHandler : StaticEventHandler
{
	override void WorldThingDied(WorldEvent e)
	{
		if (e.thing && e.thing.target
		&& e.thing.target.player
		&& e.thing.bCOUNTKILL
		&& e.thing.bISMONSTER)
		{
			e.thing.target.player.mo.A_SetBlend("RoyalBlue",0.1,17);
		}
	}
}
class BossBrainBase : Actor
{
	void RemoveCubes()
	{
		ThinkerIterator ti = ThinkerIterator.Create("Actor");
		Actor a;
		while (a = Actor(ti.Next()))
		{
			if (a is "SpawnShot" || a is "BossEye") a.Destroy();
			if (a.bISMONSTER && a.bCOUNTKILL) a.A_Die("Massacre");
		}
	}
}

class HeadShotBaseZScript : Actor //ZScriptified Headbox
{
	Default
	{
		damagefactor "Taunt", 0.0;
		damagefactor "Blood", 0.0;
		damagefactor "BlueBlood", 0.0;
		damagefactor "Head", 0.0;
		damagefactor "MinorHead", 0.0;
		damagefactor "KillMe", 0.0;
		damagefactor "Control", 0.0;
		damagefactor "Trample", 0.0;
		damagefactor "GibRemoving", 0.0;
		//damagefactor "Melee", 0.3
		damagefactor "Alert", 0.0;
		damagefactor "SSG", 8.0;
		damagefactor "ExplosiveImpact", 0.0;
		damagefactor "Bullet", 1.5;
		damagefactor "GibRemoving", 0.0;
		damagefactor "TeleportRemover", 0.0;
		DamageFactor "Freeze", 0.0;
		DamageFactor "Shrink", 0.0;
		DamageFactor "Frost", 0.0;
		DamageFactor "Ice", 0.0;
		DamageFactor "Blackhole", 0.0;
		Speed 0;
		Radius 7;
		Height 18;
		BloodType "Brutal_Blood", "SawBlood", "SawBlood";
		-COUNTKILL +NOTARGET +MISSILE
		+NOGRAVITY +SHOOTABLE +NOTELEPORT -SOLID +NODAMAGETHRUST
		+THRUGHOST +NORADIUSDMG +GHOST -COUNTKILL +NOTAUTOAIMED +DONTTHRUST
	}
	States
	{
		Spawn:
			TNT1 A 1;
			Loop;
	}
	override void Tick()
	{
		Super.Tick();
		Console.Printf("1");
		if (master) SetOrigin(master.pos + (0,0,master.height - (master.height / 6)),true);
	}
	override void PostBeginPlay()
	{
		Super.PostBeginPlay();
		//A_GiveInventory("RadiusDebugMe");
		if (target) 
		{
			master = target;
			
			bMISSILE = false;
		}
	}
	override int DamageMobj(Actor inflictor, Actor source,int damage,Name mod,int Flags,Double angle)
	{
		Console.Printf("Got Hit");
		if (master) master.DamageMobj(inflictor,source,damage * 1.5,mod == 'None' ? 'Head' : mod, flags,angle);
		return 0; //Do no real damage to self
	}
}
class HeadshotBaseZScriptB :HeadshotBaseZScript //Green blood headbox
{
	Default
	{
		BloodType "Green_Blood", "GreenSawBlood", "GreenSawBlood";
		BloodColor "DarkGreen";
		Radius 12;
		Height 22;
		+NOBLOODDECALS
	}
}
class SpawnerBase : Actor
{
	void SpawnActor(class<Actor> spawnactor, bool HandleSpawnFlags = true)
	{
			Actor a = self;
			Actor r = a.Spawn(spawnactor,a.pos);
			r.spawnangle = a.spawnangle;
			r.angle = a.angle;
			r.pitch = a.pitch;
			r.roll = a.roll;
			r.spawnpoint = a.spawnpoint;
			r.special = a.special;
			r.args[0] = a.args[0];
			r.args[1] = a.args[1];
			r.args[2] = a.args[2];
			r.args[3] = a.args[3];
			r.args[4] = a.args[4];
			r.special1 = a.special1;
			r.special2 = a.special2;
			r.spawnflags = a.spawnflags&~MTF_SECRET;
			if (HandleSpawnFlags) r.HandleSpawnFlags();
			r.spawnflags = a.spawnflags;
			r.bCOUNTSECRET = a.spawnflags&MTF_SECRET;
			r.ChangeTid(a.tid);
			r.Vel = a.vel;
	}
}
	enum EPBWeaponFlags
	{
		PBWEAP_KEEPYOFFSET = 1<<0,
		PBWEAP_ISRIFLE = 1<<1,
		PBWEAP_CHECKRIFLEEMPTY = 1<<2,
		PBWEAP_ISPISTOLSILENCERSTATE = 1<<3
	}
class InvisiblePuff : BulletPuff
{
	Default
	{
		-ALLOWPARTICLES
	}
}
class InvisiblePuffAlways : InvisiblePuff
{
	Default
	{
		+ALWAYSPUFF
		+THRUACTORS
		+ALLOWTHRUFLAGS
	}
}
class CameraRunner : Inventory
{
	override void DoEffect()
	{
		let p = PlayerPawnBase(owner);
		if (p)
		{
			p.RunCameraNew();
		}
	}
	override void OnDestroy()
	{
		let p = PlayerPawnBase(owner);
		if (p)
		{
			p.TerminateCamera();
		}
		Super.OnDestroy();
	}
}
class PlayerPawnBase : PlayerPawn
{
	bool IsTank;
	Property IsTank : IsTank;
	int tankdeathcounter;
	override void Die(Actor source, Actor inflictor, int dmgflags)
	{
		A_TakeInventory("CameraRunner",1);
		Super.Die(source, inflictor, dmgflags);
	}
	bool CheckForCamera(class<Actor> classname,int tidnum)
	{
		ActorIterator at = ActorIterator.Create(tidnum);
		Actor a = at.Next();
		if (a != NULL && a.GetClassName() == classname) return true;
		return false;
	}
	Actor CheckForCameraActor(class<Actor> classname,int tidnum)
	{
		ActorIterator at = ActorIterator.Create(tidnum);
		Actor a = at.Next();
		if (a != NULL && a.GetClassName() == classname) return a;
		return null;
	}
	void SetActorAngle(int tidnum, double angle)
	{
		ActorIterator at = ActorIterator.Create(tidnum);
		Actor a = at.Next();
		if (a != NULL) a.angle = angle;
	}
	void SetActorPitch(int tidnum, double pitch)
	{
		ActorIterator at = ActorIterator.Create(tidnum);
		Actor a = at.Next();
		if (a != NULL) a.pitch = pitch;
	}
	void SetActorRoll(int tidnum, double roll)
	{
		ActorIterator at = ActorIterator.Create(tidnum);
		Actor a = at.Next();
		if (a != NULL) a.roll = roll;
	}
	bool, Actor ExtSpawn(class<Actor> classname,Vector3 pos,int tid,double angle)
	{
		Actor a = Spawn(classname,pos,ALLOW_REPLACE);
		if (a != NULL)
		{
			a.ChangeTid(tid);
			a.angle = angle;
			return true, a;
		}
		return false, null;
	}
	bool SetActorPosition(int tidnum, Vector3 pos)
	{
		Actor a = CheckForCameraActor("ChaseCam2",tidnum);
		if (a != NULL)
		{
			a.SetOrigin(pos,true);
			if (a.pos == pos) return true;
		}
		return false;
	}
	void TerminateCamera()
	{
		SetCamera(null);
		Actor a = CheckForCameraActor("ChaseCam2",C_TID + PlayerNumber());
		if (a != NULL) a.Destroy();
	}
	Vector3, double, double ReturnCamPos()
	{
		Actor linepuff = LineAttack(angle - 180,128 + (radius*2),-pitch,0,'None',"InvisiblePuffAlways",LAF_NOINTERACT|LAF_NORANDOMPUFFZ,null,-(height/2) + player.viewheight);
		if (linepuff)
		{
			let vec3 = linepuff.pos;
			let anglevalue = linepuff.angle;
			let pitchvalue = linepuff.pitch;
			linepuff.Destroy();
			return vec3, anglevalue, pitchvalue;
		}
		return pos, angle, pitch;
	}
	void RunCameraNew()
	{
		Double anglevalue;
		Double pitchvalue;
		Vector3 campos;
		[campos,anglevalue, pitchvalue] = ReturnCamPos();
		if (!CheckForCamera("ChaseCam2",C_TID + playernumber()))
		{
			Actor cameraactor;
			bool cameraspawned;
			[cameraspawned, cameraactor] = ExtSpawn ("ChaseCam2", campos, C_TID+playernumber(), angle);
			if (CheckForCamera ("ChaseCam2", C_TID + playernumber()))
			ACS_NamedExecuteAlways('ChangeCamera',0,C_TID + playernumber());
			else
			{
				//camera_mode[p_num] = OFF;
				Console.MidPrint ("INDEXFONT_DOOM","Camera script failed to initialize.");
				return;
			}
		}
		else
		{
			while (!SetActorPosition(C_TID + PlayerNumber(),campos))
			{
			}
			SetActorAngle (C_TID + PlayerNumber(), anglevalue);
			SetActorPitch (C_TID + PlayerNumber(), clamp(pitch,-88,88));
			SetActorRoll  (C_TID + PlayerNumber(), roll);
		}
	}
	override void Tick()
	{
		Super.Tick();
		if (!level.IsJumpingAllowed() || player.mo.JumpZ == 0) GiveInventory("DoNotJump",1);
		if (IsTank && !(health <= 0))
		{
			if (health < 500)
			{
				A_CustomMissile ("BigNeoSmoke", 0, 0, random (0, 360), 2, random (0, 360));
				A_CustomMissile ("ExplosionSmoke", 0, 0, random (0, 360), 2, random (0, 360));
			}
			if (health < 350)
			{
				A_CustomMissile ("BigNeoSmoke", 0, 0, random (0, 360), 2, random (0, 360));
				A_CustomMissile ("ExplosionSmoke", 0, 0, random (0, 360), 2, random (0, 360));
			}
			if (Health < 200)
			{
				A_CustomMissile ("BigBlackSmoke", 40, 0, random (0, 360), 2, random (40, 160));
			}
			if (health < 30)
			{
				A_CustomMissile ("FlameThrowerFireParticles", 0, 0, random (0, 360), 2, random (0, 360));
				A_Playsound("BDFireplace2", 1, 1, 1);
				tankdeathcounter += 1;
				if (tankdeathcounter >= (35 * 5))
				{
					tankdeathcounter = 0;
					A_Die();
				}
			}
		}
	}
}
class LaserDeactivated : Inventory {}
class PB_WeaponBase : DoomWeapon 
{
	Actor laseractor;
	Actor InvActor;
	Vector3 invactorpos;
	int integer;
	action void A_DecideSpawnLaserPuff()
	{
			if (CountInv("LaserSightActivated")==1 && CountInv("KeepLaserDeactivated") != 1)
			{
				invoker.A_SpawnLaserPuff();
			}
			else 
			{
				invoker.A_DestroyLaserPuff();
			}
	}
	action void A_DestroyLaserPuff()
	{
		if (invoker.laseractor) invoker.laseractor.Destroy();
	}
	action Actor A_SpawnLaserPuff()
	{
		int integer;
		[invoker.InvActor, invoker.integer] = LineAttack(angle,4096,pitch,0,'None',"InvisiblePuff",LAF_NORANDOMPUFFZ|LAF_NOINTERACT);
		if (invoker.InvActor)
		{
			invoker.invactorpos = invoker.InvActor.pos;
			invoker.InvActor.Destroy();
		}
		if (!invoker.laseractor) invoker.laseractor = Spawn("LaserDotPerma",invoker.invactorpos);
		else invoker.laseractor.SetOrigin(invoker.invactorpos, true);
		
		return invoker.laseractor;
	}
	action state A_DoPBWeaponAction(int weapflags = WRF_ALLOWRELOAD, int pbFlags = 0)
	{
		static const string PBWeapEmptyToken[] = 
		{
			"PBPistolWasEmpty","RifleWasEmpty","UACSMGWasEmpty"
		};
		static const string PBWeapUnloadedToken[] =
		{
			"HasUnloaded","PulseCannonHasUnloaded"
		};
		static const string PBWeapUnloadableClasses [] =
		{
			"PB_Weapon","PulseCannon"
		};
		if (CountInv("GoFatality")>=1)
		{
			return ResolveState("Steady");
		}
		else if (CountInv("Grabbing_A_Ledge")>=1) 
		{
			return ResolveState("LedgeClimb");
		}
		else if (CountInv("DoPunch")>=1) 
		{
			return ResolveState("QuickPunch");
		}
		else if (CountInv("Kicking")>=1) 
		{
			return ResolveState("DoKick");
		}
		else if (CountInv("Taunting")>=1) 
		{
			return ResolveState("Taunt");
		}
		else if (CountInv("Salute1")>=1 || CountInv("Salute2")>=1) 
		{
			return ResolveState("Salute");
		}
		else if (CountInv("UseEquipment")>=1) 
		{
			return ResolveState("UseEquipment");
		}
		else if (CountInv("ToggleEquipment")>=1) 
		{
			return ResolveState("SwitchEquipment");
		}
		else if (CountInv("GoWeaponSpecialAbility")>=1)
		{
			if (ResolveState("DualWieldBaby")) return ResolveState("DualWieldBaby");
			else if (ResolveState("NoDualWield")) return ResolveState("NoDualWield");
			else return ResolveState("WeaponSpecial");
		}
		else if (CountInv("GrabbedBarrel")>=1 || CountInv("GrabbedBurningBarrel")>=1) 
		{
			return ResolveState("GrabBarrel");
		}
		else if (CountInv("Unloading")>=1 && ResolveState("Unload"))
		{
			return ResolveState("Unload");
		}
		else 
		{
			for (int untoken = 0; untoken < PBWeapUnloadedToken.Size(); ++untoken)
			{
				if (CountInv(PBWeapUnloadedToken[untoken]) >= 1)
				{
					return ResolveState("GunEmpty");
				}
			}
		}
		if (ResolveState("LoadChamber"))
		{
			for (int i = 0; i < PBWeapEmptyToken.Size(); ++i)
			{
				if (CountInv(PBWeapEmptyToken[i]) >= 1)
				{
					return ResolveState("LoadChamber");
				}
			}
		}
		else if (ResolveState("ReadyToFireSilencer") 
		&& CountInv("SilencerEquipped") >= 1
		&& !(pbFlags & PBWEAP_ISPISTOLSILENCERSTATE))
		{
			return ResolveState("ReadyToFireSilencer");
		}
		A_WeaponReady(weapflags);
		A_WeaponOffset(-CallACS("Script_GetGunOffsetX"), CallACS("Script_GetGunOffsetY"),WOF_INTERPOLATE | (!!(pbFlags & PBWEAP_KEEPYOFFSET) ? WOF_KEEPY : 0));
		return null;
	}
  
	action void A_SetWeaponSprite(String str)
        {
                    let psp = player.GetPSprite(PSP_WEAPON);
                    psp.sprite = GetSpriteIndex(str);
        }
}